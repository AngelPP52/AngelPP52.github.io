(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{508:function(s,a,n){s.exports=n.p+"assets/img/question.8ef3c06b.png"},509:function(s,a,n){s.exports=n.p+"assets/img/road.003a4837.png"},510:function(s,a,n){s.exports=n.p+"assets/img/domain.1947f8da.png"},511:function(s,a,n){s.exports=n.p+"assets/img/path.97b1fe91.png"},512:function(s,a,n){s.exports=n.p+"assets/img/cookie.ee16075d.png"},513:function(s,a,n){s.exports=n.p+"assets/img/query.c4402392.png"},514:function(s,a,n){s.exports=n.p+"assets/img/image4.3f95ff8a.png"},515:function(s,a,n){s.exports=n.p+"assets/img/node.1519e10c.png"},516:function(s,a,n){s.exports=n.p+"assets/img/image1.a4564d91.png"},517:function(s,a,n){s.exports=n.p+"assets/img/image5.b4ba9b2c.png"},518:function(s,a,n){s.exports=n.p+"assets/img/image3.664ee371.png"},554:function(s,a,n){"use strict";n.r(a);var e=n(4),t=Object(e.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"前端fte解决方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前端fte解决方案"}},[s._v("#")]),s._v(" 前端FTE解决方案")]),s._v(" "),e("h2",{attrs:{id:"背景说明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#背景说明"}},[s._v("#")]),s._v(" 背景说明")]),s._v(" "),e("p",[s._v("FTE是指Feature Test Environment，主要用于前后端联调验证。为了保证Test环境的稳定，前后端联调时应该避免直接部署Test环境，这个时候就需要额外的一套环境支持。")]),s._v(" "),e("p",[s._v("部门内后台已经有FTE环境，方便前端联调使用；当后台需要使用前端环境验证时，一般我们直接抛出一个局域网地址访问本地就行了，但遇到前端开会、休假、或者后台加班赶工时，电脑黑屏或者未联网都会导致服务不可用，这给后台调试增加了困难。")]),s._v(" "),e("h2",{attrs:{id:"需求分析与调研"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#需求分析与调研"}},[s._v("#")]),s._v(" 需求分析与调研")]),s._v(" "),e("p",[s._v("解决一个问题前，我们应该先弄清楚问题是什么，毕竟找到对的问题才能做出正确的答案。当前最直接的问题是前端服务不可用，造成的直接影响是后台在页面调试不方便。我们以这个问题为起点来分析：")]),s._v(" "),e("h3",{attrs:{id:"问题一：是否要解决这个问题？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#问题一：是否要解决这个问题？"}},[s._v("#")]),s._v(" 问题一：是否要解决这个问题？")]),s._v(" "),e("p",[s._v("虽然直接影响的是后台，但如果我们不解决这个问题，对前端工作也会带来很大的困扰。比如在联调时后台接口遇到了问题，改动后需要前端来验证，频繁的改动会耗费前端大量的时间和耐心，总是抱怨后台质量不佳。前后端分离后应该要能够使各自的工作尽量闭环才能高效产出，前端可以使用MOCK API的方式来模拟后台接口，但后台却没有办法MOCK前端，难以模拟实际使用场景，因此提供一个稳定的联调环境确实能够在工作流中提高协作效率。")]),s._v(" "),e("h3",{attrs:{id:"问题二：怎么解决这个问题？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#问题二：怎么解决这个问题？"}},[s._v("#")]),s._v(" 问题二：怎么解决这个问题？")]),s._v(" "),e("p",[s._v("如果只是保证服务稳定，我们有很多方式解决：")]),s._v(" "),e("ul",[e("li",[e("code",[s._v("让前端的电脑保持运行")]),s._v("：但这明显是不会被公司安全部门允许，这意味着前端的电脑时刻都能被其他人操作；")]),s._v(" "),e("li",[e("code",[s._v("让后台本地运行前端项目")]),s._v("：听起来是一个不错的主意，但这不是一个可靠的方法，因为新服务的部署必然意味着随之而来的维护成本，前端时常会更新依赖包，甚至可能导致一些启动错误，对于不了解前端技术栈的人来说，即使有详细的文档指引也可能面临困境，毕竟每个人的本地环境可能都不太一样，哪怕用docker解决环境问题，也还有后端代码权限开放、经常需要拉取更新代码等没完没了的工作，毕竟只有前端自己才最清楚项目的维护；")]),s._v(" "),e("li",[e("code",[s._v("在远程服务端部署一个前端服务")]),s._v("：这种方式看起来和TEST环境最贴近，是大家熟悉的方式，虽然新环境需要维护，但我们可以多人共用一套环境，前端部署其实只是一堆静态资源的存放和读取，我们可以让开发本地build后再上传，尽量减少新环境的依赖，从而降低维护成本")])]),s._v(" "),e("p",[s._v("因此我们选择了在远程服务端部署一个前端服务的方向去解决当前问题。")]),s._v(" "),e("h3",{attrs:{id:"问题三：问题该由谁来解决？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#问题三：问题该由谁来解决？"}},[s._v("#")]),s._v(" 问题三：问题该由谁来解决？")]),s._v(" "),e("p",[s._v("既然是环境问题，最直接想到的就是运维，于是我们找运维沟通，发现运维已经在这方面提供了支持，很好，那我们就来试试。但这个过程实在太繁琐，最终硬着头皮把环境搭建起来了，可刚用半天就因为前端一个新的部署调整更新导致无法访问了，这里就不展开问题细节了。在运维确定当前的设计无法继续支持后，运维评估下一个版本能够支持，但目前暂不确定版本发布的计划。")]),s._v(" "),e("p",[s._v("也许我们可以通过问题上升，找运维的组长沟通优先级，尽快解决我们的问题，且不说是否能推动，但问题真的能解决吗？运维并不关心前端的实现，并且运维更多考虑的是整体技术部门的通用方案，对于细节方面很难覆盖到个性化需求，这也是现在提倡devOps的原因，与其花费大量的沟通成本来推动运维，不如前端自己来解决。")]),s._v(" "),e("h3",{attrs:{id:"问题四：这次问题是什么？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#问题四：这次问题是什么？"}},[s._v("#")]),s._v(" 问题四：这次问题是什么？")]),s._v(" "),e("p",[s._v("由前端开发来搭建一套前端的FTE环境，这听起来很简单，但实际操作起来还是有很多问题，开发手上并没有机器资源，涉及到机器、域名等资源还是要向运维申请，除此之外还有用什么技术实现，需要实现到什么程度，需求考虑是否全面，什么时候做，谁来做等等一大堆问题，在有了方向之后，我们应该先把问题的阶段和范围大致梳理一下，排个并行或串行的优先级，"),e("code",[s._v("避免解决过程中总是变更或遇到阻塞性问题")]),s._v("，影响效率。")]),s._v(" "),e("p",[e("img",{attrs:{src:n(508),alt:"question"}})]),s._v(" "),e("h4",{attrs:{id:"资源准备："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#资源准备："}},[s._v("#")]),s._v(" 资源准备：")]),s._v(" "),e("ol",[e("li",[s._v("机器资源申请")]),s._v(" "),e("li",[s._v("域名申请")])]),s._v(" "),e("p",[s._v("资源申请需要开通账号权限，走审核流程，是一个漫长且不确定的过程，可以和其他工作并行，并且在申请下来之前寻找临时替代方案，比如借用已有机器、本地配置host等")]),s._v(" "),e("h4",{attrs:{id:"需求收集："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#需求收集："}},[s._v("#")]),s._v(" 需求收集：")]),s._v(" "),e("ol",[e("li",[s._v("确定用户群体")]),s._v(" "),e("li",[s._v("收集用户诉求")])]),s._v(" "),e("p",[s._v("方案设计是所有开发工作的前提，但在设计之前，我们应该先想清楚为谁而设计。")]),s._v(" "),e("p",[s._v("如果只是一个人的问题，完全可以借一个内网机器，把代码拉下来npm run dev就行了，实际上我就这么做的，但很快其他开发也提出了需求，我们可以划分一下端口号，大家各自管理自己的服务，可是部门人数和项目众多，涉及机器容量、代码权限、机器账号权限等问题发散以后难以管理，还是需要一个统一的服务来处理。因此我们要解决的问题是：搭建一个满足整个部门的前端FTE环境。既然要做通用，自然需要先了解大家的项目情况、诉求点。")]),s._v(" "),e("p",[s._v("整理以后大概如下：")]),s._v(" "),e("ul",[e("li",[s._v("支持google登陆，google登陆跳转只支持域名")]),s._v(" "),e("li",[s._v("支持不同的后台接口代理，大部分后台服务并不支持跨域（虽然我们向运维提过需求，但他们还是回复下一个版本才能解决）")]),s._v(" "),e("li",[s._v("按人支持静态资源路由分发，FTE是联调阶段的私有环境，开发之间的环境应该相互隔离，但最终访问的服务只有一个")])]),s._v(" "),e("p",[s._v("对于非功能性的需求有：")]),s._v(" "),e("ul",[e("li",[s._v("稳定：比如防止磁盘满，机器宕机，异常出错等导致服务不可用")]),s._v(" "),e("li",[s._v("使用简单：如果为了使用FTE引入太多工作，怕是没人愿意用了")]),s._v(" "),e("li",[s._v("安全：不同项目组源代码应该保持隔离")])]),s._v(" "),e("h4",{attrs:{id:"计划排期："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#计划排期："}},[s._v("#")]),s._v(" 计划排期：")]),s._v(" "),e("ul",[e("li",[s._v("一周内能够使用：了解到有部分开发急需，实现越快越好，在初步沟通以后，我们暂定了一周时间")]),s._v(" "),e("li",[s._v("人员安排：在梳理了自己手头上的事情计划以后，提前和leader沟通排期，并且找到可能需要协助的人员提前周知计划")])]),s._v(" "),e("p",[e("img",{attrs:{src:n(509),alt:"road"}})]),s._v(" "),e("p",[s._v("要致富先修路！铺好路，开始出发。")]),s._v(" "),e("h2",{attrs:{id:"方案设计"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方案设计"}},[s._v("#")]),s._v(" 方案设计")]),s._v(" "),e("p",[s._v("设计阶段并不仅是纸上谈兵，我们应该结合实践做一些可行性验证，因此在方案明确之前，尽快做出一个可运行demo非常重要。")]),s._v(" "),e("h3",{attrs:{id:"方案一：nginx-泛域名"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方案一：nginx-泛域名"}},[s._v("#")]),s._v(" 方案一：nginx + 泛域名")]),s._v(" "),e("p",[e("img",{attrs:{src:n(510),alt:"domain"}})]),s._v(" "),e("p",[s._v("想着简单实现快速迭代，最简单的方法就是起个nginx服务，然后向运维申请一个泛域名*.ssc-fte.shopee.com，在nginx中通过区分不同的域名前缀来映射到不同的文件夹，文件上传则使用scp等方式即可，这个方案还没开始就叫停了，原因是运维那边当前不支持泛域名的配置")]),s._v(" "),e("h3",{attrs:{id:"方案二：nginx-前缀"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方案二：nginx-前缀"}},[s._v("#")]),s._v(" 方案二：nginx+前缀")]),s._v(" "),e("p",[e("img",{attrs:{src:n(511),alt:"path"}})]),s._v(" "),e("p",[s._v("既然不支持泛域名，那就用URL前缀区分吧，只要前端构建时webpack加上publicPath配置，上传到对应文件夹也是可以的，但是这种方式对原有项目的侵入性比较强，针对不同的项目有较多的问题：")]),s._v(" "),e("ul",[e("li",[s._v("修改base url侵入性比较强，像el-upload这种没有经过统一的配置，需要逐个替换前缀")]),s._v(" "),e("li",[s._v("有些直接url跳转或者后端重定向的场景不能同步前缀配置，可能导致页面跳转问题，比如login")]),s._v(" "),e("li",[s._v("vue router 需要加base，涉及路径匹配的逻辑可能有影响")])]),s._v(" "),e("h3",{attrs:{id:"方案三：nginx-cookie"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方案三：nginx-cookie"}},[s._v("#")]),s._v(" 方案三：nginx+cookie")]),s._v(" "),e("p",[e("img",{attrs:{src:n(512),alt:"cookie"}})]),s._v(" "),e("p",[s._v("为了提高易用性，我们又讨论了一波，如何在不改动原来项目，且使用同一个域名的情况下区分不同的环境呢？这里必然是要携带一些信息传递到服务端的，除了域名、URL，就还有参数，cookie。参数的方式同样需要改造前端代码，因为无论是静态资源还是后台接口的请求，都是前端代码发出来的，而且很可能会在一些跳转的场景中丢失参数，看来最合适的就是cookie了。通过cookie中的参数来决定返回哪个文件夹内资源或者转发请求到哪个后台服务，初步设计参数如下：")]),s._v(" "),e("ul",[e("li",[s._v("fe：静态文件路径名，为public目录下相对路径")]),s._v(" "),e("li",[s._v("be：后台fte环境的host，暂时只支持http")]),s._v(" "),e("li",[s._v("public_path：前端静态资源前缀，防止单页应用404")])]),s._v(" "),e("p",[s._v("对应的nginx配置如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("server {\n   listen 80;\n   charset utf-8;\n \n   location / {\n       add_header Cache-Control max-age=0;\n \n       alias /var/www/$cookie_fe/;\n       index index.html;\n \n       try_files $uri $uri/ @index;\n   }\n \n   location @index {\n       rewrite ^/(.*)$ /$cookie_public_path/;\n   }\n \n   # API路由\n   location /api {\n       proxy_pass http://$cookie_be;\n       proxy_set_header Host $cookie_be; # 如果使用代理到域名，需要固定host屏蔽跨域\n       proxy_set_header X-Forwarded-Host $server_name;\n       proxy_set_header X-Real-IP $remote_addr;\n       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n   }\n \n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br")])]),e("p",[s._v("这个过程中由于对nginx配置细节不熟悉，踩了很多坑，这里不再详细解说，准备另写文章。")]),s._v(" "),e("p",[s._v("public_path设置的目的：由于前端使用history模式的单页应用通过本地更改URL地址来切换页面,但实际上服务端并不存在对应路径的资源,如果刷新页面会导致404。为了解决这一问题使用了nginx的try_files，由于try_files不支持变量，只能再嵌套一层locaiton来重写rewrite。")]),s._v(" "),e("p",[s._v("这还没完，由于手动设置cookie的方式沟通起来比较麻烦，尽管chrome有插件可以用，但这无疑增加了和使用者的沟通成本。我们这里通过一个链接附带query参数访问时，服务端获取到对应的参数再返回set-cookie，并且去除参数后重定向到原来的地址，这样对于使用者只要拿到一个入口链接后续就能直接访问对应环境了。")]),s._v(" "),e("p",[e("img",{attrs:{src:n(513),alt:"query"}})]),s._v(" "),e("p",[s._v("效果如图：")]),s._v(" "),e("p",[e("img",{attrs:{src:n(514),alt:"抓包"}})]),s._v(" "),e("p",[s._v("代码：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('location / {\n       # access_log  /var/log/nginx/static.log  main;\n       add_header Cache-Control max-age=0;\n \n       # 首次运行没有cookie时，需要使用arg_fe\n       set $fe $cookie_fe;\n       if ( $arg_fe ) {\n           set $fe $arg_fe;\n       }\n \n       set $public_path $cookie_public_path;\n       if ($arg_public_path) {\n           set $public_path $arg_public_path;\n       }\n      \n       # server、location、if模块add_header会覆盖之前的值，需要重新add_header\n       if ( $arg_be ) {\n           set $be $arg_be;\n           add_header Cache-Control max-age=0;\n           add_header Set-Cookie "be=$be;path=/";\n           add_header Set-Cookie "fe=$fe;path=/";\n           add_header Set-Cookie "public_path=$public_path;path=/";\n \n           set $args "";\n           rewrite ^/(.*)$ $uri redirect;\n       }\n \n       alias /var/www/$fe/;\n       index index.html;\n \n       try_files $uri $uri/ @index;\n   }\n \n   location @index {\n       rewrite ^/(.*)$ /$cookie_public_path/;\n   }\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br")])]),e("p",[s._v("这里有个细节问题，if模块中add_header会以覆盖的方式重写header，导致外层模块set-cookie失效，不得不重复set一次Cache-Control")]),s._v(" "),e("p",[s._v("好景不长，我们在实现过程中遇到了一个致命问题，nginx的代理模块proxy_pass不支持域名变量！准确的来说，是DNS缓存导致域名解析失败，nginx仅在启动的时候会预读取一次DNS并缓存下来，未在配置中出现的域名在后续过程中迟迟无法解析，尽管我们设置缩短了DNS缓存的有效期但依然无效，在多次查阅文档和尝试都无法解决以后，我们决定放弃了，毕竟官方都说了，nginx并不擅长做转发代理。如果要绕开这个问题，要么每次新增域名变量后重启服务，这显然不可取；要么就改用其他方式实现代理服务，这个时候我们决定选择前端熟悉的nodejs。")]),s._v(" "),e("h3",{attrs:{id:"方案四：nodejs-管理页面"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方案四：nodejs-管理页面"}},[s._v("#")]),s._v(" 方案四：nodejs+管理页面")]),s._v(" "),e("p",[e("img",{attrs:{src:n(515),alt:"node"}})]),s._v(" "),e("p",[s._v("在设计nodejs服务之前，我们先把需要解决的问题总结一下：")]),s._v(" "),e("ul",[e("li",[s._v("读取链接中的参数，如果符合要求则设置到cookie中，并重定向到消除参数后的地址")]),s._v(" "),e("li",[s._v("读取cookie中的参数，并根据cookie转发后台请求，或返回指定静态文件")])]),s._v(" "),e("p",[s._v("为了提高构建者和使用者的体验增强功能，我们还增加如下Feature：")]),s._v(" "),e("ul",[e("li",[s._v("添加proxy参数，支持配置需要转发的path")]),s._v(" "),e("li",[s._v("支持在页面添加上传压缩包来代替scp")]),s._v(" "),e("li",[s._v("支持在页面参数填写并生成链接")]),s._v(" "),e("li",[s._v("提供文件夹列表查看和删除功能，支持自助空间管理，并定时清理3个月外的文件夹")]),s._v(" "),e("li",[s._v("提供开放对接能力，支持打包自动化")])]),s._v(" "),e("p",[s._v("最早采用服务器指令上传文件是为了方便，毕竟可以添加脚本工具，但这带来脚本更新的工作，并且增加了机器账号安全管理的难度，最后我们还是决定提供上传的HTTP接口，同时也提供了页面上传，增加页面的目的是为了方便后续的更新管理，使用者不再需要知道接口调用的参数问题。在页面添加参数填写和链接生成也是如此。")]),s._v(" "),e("p",[s._v("实现版本：")]),s._v(" "),e("p",[e("img",{attrs:{src:n(516),alt:"Program1"}})]),s._v(" "),e("p",[e("code",[s._v("参数的改版：")])]),s._v(" "),e("p",[s._v("在初步方案打通后，我们更加详细的考虑了后续推广的问题，尽量保证通用性同时方便理解，我们对最初参数和实现进行了改良：")]),s._v(" "),e("p",[e("img",{attrs:{src:n(517),alt:"Program2"}})]),s._v(" "),e("p",[e("img",{attrs:{src:n(518),alt:"Parameter Description"}})]),s._v(" "),e("ul",[e("li",[s._v("fe改为fe_root，更加明确参数的含义")]),s._v(" "),e("li",[s._v("public_path改为fe_404，并且支持多入口配置，每当有开发问到都需要对public_path进行一番解释，改成fe_404是为了更加清晰的表达参数含义，就是为了解决虚拟路径访问的问题。")]),s._v(" "),e("li",[s._v("be改为了be_path，并且支持多域名配置，针对不同的路径转发到不同的后台也是非常有可能的场景。")])]),s._v(" "),e("p",[s._v("到这里前端个人的FTE环境从构建到使用都已经非常简化，整体流程如下：")]),s._v(" "),e("ol",[e("li",[s._v("前端本地构建")]),s._v(" "),e("li",[s._v("压缩静态资源")]),s._v(" "),e("li",[s._v("打开浏览器")]),s._v(" "),e("li",[s._v("填写参数")]),s._v(" "),e("li",[s._v("上传文件")]),s._v(" "),e("li",[s._v("复制访问链接")]),s._v(" "),e("li",[s._v("发送给访问者")])]),s._v(" "),e("p",[s._v("看起来操作步骤还是有很多，我们又提供了构建脚本，在build完以后自动打包，并从git中获取当前账号邮箱前缀作为fe_root参数，打开浏览器时默认填写，参考如下：")]),s._v(" "),e("p",[s._v("添加build/open-fte-tools.js文件：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const { spawnSync } = require('child_process');\nconst spawn_config = {\n  encoding: 'utf8',\n};\n// 获取Git用户名\nconst git_config = spawnSync('git', ['config', 'user.email'], spawn_config);\nconst user = git_config.stdout.split('@')[0];\nconst fte_url = 'http://localhost/tools/index.html';\n// 打开浏览器\nspawnSync('open', [fte_url + '?fe_root=' + user], spawn_config)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("p",[s._v("在package.json添加script:")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('{\n  "scripts": {\n    "build:fte": "rm -rf dist/* ; yarn build && cd dist && tar -czvf dist.tar.gz * && cd .. && node build/open-fte-tools.js"\n  }\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("运行yarn build:fte后会自动打开"),e("code",[s._v("http://localhost/tools/index.html?fe_root=liang.xie")]),s._v("，此时页面中已经默认填充了fe_root参数，当然在后期我们打算考虑接入公司邮箱单点登陆，一是避免参数不规范，再来也能减少传参")]),s._v(" "),e("p",[s._v("最终步骤只要3-4步：")]),s._v(" "),e("ol",[e("li",[s._v("本地运行build:fte，自动弹出页面并附带fe_root参数")]),s._v(" "),e("li",[s._v("如有需要，填下其他参数")]),s._v(" "),e("li",[s._v("上传文件，完成后会自动复制链接到粘贴板")]),s._v(" "),e("li",[s._v("发送给访问者")])]),s._v(" "),e("p",[s._v("看起来第一阶段基本上能够满足了，下面来看看实现细节。")]),s._v(" "),e("h2",{attrs:{id:"实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[s._v("#")]),s._v(" 实现")]),s._v(" "),e("h3",{attrs:{id:"技术选型："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#技术选型："}},[s._v("#")]),s._v(" 技术选型：")]),s._v(" "),e("ul",[e("li",[s._v("koa")]),s._v(" "),e("li",[s._v("http-proxy-middleware")])]),s._v(" "),e("p",[s._v("koa vs express")]),s._v(" "),e("p",[s._v("虽然本质上这2个框架并没有太大区别，但是koa2能够使用async/await，比起express的回调更加方便一些，而且同步调用的方式更容易捕获错误。除此之外koa的洋葱模型和context上下文也别具特点，对于处理中间件后置逻辑和获取上下文状态更方便。这些也是egg选择基于koa扩展的原因，当然不选择egg也是因为目前的场景非常简单，使用koa已经足够了，避免不必要的负担和维护成本。")]),s._v(" "),e("p",[s._v("request vs http-proxy-middleware")]),s._v(" "),e("p",[s._v("最开始这里选择的是request库作为请求转发，但这得把请求所有的query、header、body都得识别并转发出去，对于https等还有一些处理细节，操作起来非常繁琐，最终还是决定用webpack常用的http-proxy-middleware插件来转发，毕竟之前本地run dev一直在用，大部分情况都已经能够满足。不过http-proxy-middleware原本是express的中间件，需要做一些转换。")]),s._v(" "),e("h3",{attrs:{id:"实现细节："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实现细节："}},[s._v("#")]),s._v(" 实现细节：")]),s._v(" "),e("p",[s._v("首先使用koa-generator初始化一个新的koa2项目，基本配置都有了，接下来实现核心的2个方法，按配置返回静态文件和转发后台接口：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 获取匹配path的key配置\nfunction getConfigTarget(path, opt, defaultPrePath = '/') {\n let config = [];\n try {\n   config = JSON.parse(opt);\n } catch (e) {\n   // 将结构统一转换为Array:[{target: perPath: Array}]\n   const change = {};\n   change[opt] = [defaultPrePath];\n   config = [change];\n }\n \n // 匹配路径\n const match_item = config.find(item => {\n   const perPath = Object.values(item)[0];\n   const isMatch = perPath.some(\n     value => path.slice(0, value.length) === value\n   );\n   return isMatch;\n });\n \n if (match_item) {\n   return Object.keys(match_item)[0];\n }\n return '';\n}\nrouter.get('/(.*)', async (ctx, next) => {\n // 从参数中获取配置\n // 获取后set cookie，并返回302，消除参数\n // 如果没有则从cookie中获取\n let { fe_root, fe_404, be_path } = ctx.request.query;\n const { path } = ctx;\n \n if (fe_root) {\n   ctx.cookies.set('fe_root', fe_root);\n   ctx.cookies.set('fe_404', fe_404);\n   ctx.cookies.set('be_path', be_path);\n   ctx.redirect(ctx.request.path);\n   return;\n }\n \n fe_root = ctx.cookies.get('fe_root');\n fe_404 = ctx.cookies.get('fe_404') || 'index.html';\n \n if (!fe_root) {\n   ctx.body = 'fe_root is required';\n   ctx.status = 404;\n   return;\n }\n \n let tryFiles = '';\n try {\n   tryFiles = await render(`${fe_root}${ctx.request.path}`);\n } catch (e) {\n   fe_404 = getConfigTarget(path, fe_404);\n   tryFiles = await render(`${fe_root}/${fe_404}`);\n }\n \n const extname = ctx.request.path.split('.');\n if (extname.length < 2) {\n   ctx.set('Content-Type', ctx.request.header.accept.split(',')[0]);\n } else {\n   ctx.type = extname.pop();\n }\n \n if (ctx.type.match(/(^application(?!\\/javascript))|(html$)/)) {\n   ctx.set('Cache-Control', 'max-age=0');\n } else {\n   ctx.set('Cache-Control', 'max-age=604800');\n }\n ctx.body = tryFiles;\n});\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br"),e("span",{staticClass:"line-number"},[s._v("59")]),e("br"),e("span",{staticClass:"line-number"},[s._v("60")]),e("br"),e("span",{staticClass:"line-number"},[s._v("61")]),e("br"),e("span",{staticClass:"line-number"},[s._v("62")]),e("br"),e("span",{staticClass:"line-number"},[s._v("63")]),e("br"),e("span",{staticClass:"line-number"},[s._v("64")]),e("br"),e("span",{staticClass:"line-number"},[s._v("65")]),e("br"),e("span",{staticClass:"line-number"},[s._v("66")]),e("br"),e("span",{staticClass:"line-number"},[s._v("67")]),e("br"),e("span",{staticClass:"line-number"},[s._v("68")]),e("br"),e("span",{staticClass:"line-number"},[s._v("69")]),e("br"),e("span",{staticClass:"line-number"},[s._v("70")]),e("br"),e("span",{staticClass:"line-number"},[s._v("71")]),e("br"),e("span",{staticClass:"line-number"},[s._v("72")]),e("br")])]),e("p",[s._v("值得注意的是，在实现过程中需要处理文件的content-type，而koa刚好内置了属性，将文件后缀设置后能够返回对应的content-type，这样就不需要自己去处理了。起初我们试过直接返回accept-type，但很多请求携带的类型并不明确，html和js还好，当请求css收到content-type=*时，浏览器无法正常解析样式。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// proxy api\napp.use(async (ctx, next) => {\n const { path } = ctx;\n let be_path = ctx.cookies.get('be_path');\n const target = getConfigTarget(path, be_path, '/api');\n \n if (target) {\n   await k2c(\n     createProxyMiddleware({\n       target,\n       changeOrigin: true,\n       onProxyRes: (proxyRes, req, res) => {\n         if (proxyRes.headers['access-control-allow-origin']) {\n           proxyRes.headers['access-control-allow-origin'] =\n             ctx.request.origin;\n         }\n       },\n     })\n   )(ctx, next);\n }\n await next();\n});\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br")])]),e("h3",{attrs:{id:"部署："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#部署："}},[s._v("#")]),s._v(" 部署：")]),s._v(" "),e("p",[s._v("koa-generator已经默认使用了pm2作为启动命令，这里添加了 -i 4来启动4个进程，提高系统的高可用，另外还添加reload和restart的命令方便部署")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('"scripts": {\n   "start": "PORT=3001 node bin/www",\n   "dev": "PORT=80 ./node_modules/.bin/nodemon bin/www",\n   "prd": "PORT=80 pm2 start -i 4 bin/www --name=\\"fe-fte-builder\\"",\n   "stop": "pm2 delete fe-fte-builder",\n   "restart": "yarn stop && yarn prd"\n },\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[e("code",[s._v("启动端口：")])]),s._v(" "),e("p",[s._v("值得注意的是，一般情况我们应该避免使用80端口，pm2是使用程序启动进程，即使使用su pm2启动主进程，也会导致运行进程的权限的问题，但如果非要这样做，pm2官方也给出了解决方法，为pm2增加一个用户权限即可。")]),s._v(" "),e("p",[s._v("官方说明：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\nIt’s a general rule that you should not run node as root. However only root can bind to ports less than 1024. This is where authbind comes in. Authbind allows non-root users to bind to ports less than 1024. Replace %user% with the user that will be running pm2.\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("h3",{attrs:{id:"关于日志："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#关于日志："}},[s._v("#")]),s._v(" 关于日志：")]),s._v(" "),e("p",[s._v("作为一个中间服务，日志明细的记录和透明也比较重要，因为当服务出问题时，开发总是会怀疑是否代理服务漏传了什么参数，不过初期这里并没有实现，后续可以提供一个简单的页面做日志的自助查询")]),s._v(" "),e("h2",{attrs:{id:"回顾总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#回顾总结"}},[s._v("#")]),s._v(" 回顾总结")]),s._v(" "),e("h3",{attrs:{id:"问题真的解决了吗"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#问题真的解决了吗"}},[s._v("#")]),s._v(" 问题真的解决了吗")]),s._v(" "),e("p",[s._v("回顾一下我们解决问题的初衷，为了方便后台在未提测的页面上调试功能，我们搭建了一个远程的FTE环境。但服务上线就完了吗，这并不是问题的终点，每一个方案背后都会带来另外的问题，选择取决于利弊的衡量。")]),s._v(" "),e("h4",{attrs:{id:"关于服务可运维性："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#关于服务可运维性："}},[s._v("#")]),s._v(" 关于服务可运维性：")]),s._v(" "),e("p",[s._v("还记得学习软件课程时老师一直强调，软件的含义是代码+文档，大部分开发都能够意识到除了代码以外文档的重要性，但很容忽略另一个重要的问题——软件的可运维性；代码部署上线并不是终点，我们本意是提高开发效率，但若是因为服务运维的问题持续投入人力，就有点得不偿失了，为此我们还需要考虑一下几个问题：")]),s._v(" "),e("ul",[e("li",[s._v("服务高可用：")])]),s._v(" "),e("p",[s._v("前面已经简单的做了单机多活的方式，万一一个进程阻塞或崩溃了，还有其他可以顶着。当然高可用是一个非常大的话题，这个服务没有持久化状态需要维护，所以直接用pm2 -i就能有不错的效果了")]),s._v(" "),e("ul",[e("li",[s._v("容量管理：")])]),s._v(" "),e("p",[s._v("相信有服务端经验的同学多少都踩过磁盘满的坑，这里对上传的资源文件和日志做一个简单的清理机制兜底即可，为了方便开发自助管理，我们还加了一个查看和清理用户文件夹的功能")]),s._v(" "),e("ul",[e("li",[s._v("日志查询：")])]),s._v(" "),e("p",[s._v("作为一个新接入的中间服务，每当服务端出问题很容易就会怀疑是否中间服务少传了参数或者有其他异常，事实上这个服务在内测期间我就已经协助查了几次日志了，后续将会考虑添加自助查询日志的功能，方便使用者定位问题")]),s._v(" "),e("ul",[e("li",[s._v("一键部署：")])]),s._v(" "),e("p",[s._v("有句话是遇到问题先重启，虽然重启不是万能但总是能解决很多问题，有一个简单的启停方式对于临时解决一些问题以及服务迁移都非常有用，如果作为开发者恰好休假的时候服务出问题，更是需要不熟悉服务的人能够快速操作来恢复服务。因此一键启停，将所有配置写入文件中存储，备份上一个稳定运行的版本都应该在服务上线时做好，避免后顾之忧。由于当前服务场景简单，pm2和npm的脚本已经能够做到，否则可以考虑docker-compose封装")]),s._v(" "),e("ul",[e("li",[s._v("自动启动：")])]),s._v(" "),e("p",[s._v("遇到一些异常或者机房断电等情况导致服务停止，需要能够自动启动，这里最好是能够通过重启机器和kill的方式来实际验证效果，pm2提供了startup方式支持开启启动，同时建议也加上重试次数限制，否则异常情况可能导致机器卡死")]),s._v(" "),e("h4",{attrs:{id:"如何推广："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何推广："}},[s._v("#")]),s._v(" 如何推广：")]),s._v(" "),e("p",[s._v("我一直很赞同一句话，没有功劳只有苦劳只是给失败者的安慰，真正想把一件事情做好，一定要考虑落地后的价值如何体现，如果效果不好及时调整，如果方向不对那就把真正核心的问题找出来。而评估效果的前提就是得有用户用起来，前期调研的时候已经有开发等着用了，而这件事情也是在领导的大力支持下进行，这是一个好的开头，但在落地过程中依然有很多细节，一般我们需要这么几个步骤：")]),s._v(" "),e("ul",[e("li",[s._v("小范围试用：")])]),s._v(" "),e("p",[s._v("一鼓作气，再而衰，三而竭，不成熟的服务如果推广太早，只会导致失去用户的信任，加大后续工作的难度，所以先挑几个不同的个例，小范围使用非常有必要。")]),s._v(" "),e("ul",[e("li",[s._v("预告：")])]),s._v(" "),e("p",[s._v("在部门周会或者内网，先公布行动的计划，让大家先了解背景和存在问题，让遇到相同问题的开发心里有预期，并且收集大家的建议")]),s._v(" "),e("ul",[e("li",[s._v("公开宣导：")])]),s._v(" "),e("p",[s._v("正式发版时通告所有人，消息要到位，问题响应要及时")]),s._v(" "),e("ul",[e("li",[s._v("主动出击：")])]),s._v(" "),e("p",[s._v("你隔壁部门的研发可能遇到类似的问题，但是因为担心采坑正在犹豫是否要对接，这个时候需要你主动出击，找对应的负责人了解详情并推广服务")]),s._v(" "),e("ul",[e("li",[s._v("总结分享：")])]),s._v(" "),e("p",[s._v("一篇具吸引力的技术文章或分享会议，可能引来不少人，尤其是开发的关注，这也是这篇文章的目的之一")]),s._v(" "),e("h4",{attrs:{id:"效果评估："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#效果评估："}},[s._v("#")]),s._v(" 效果评估：")]),s._v(" "),e("ul",[e("li",[s._v("数据分析：")])]),s._v(" "),e("p",[s._v("数据是效果分析的核心，在这个服务中，我们需要关注的数据有：")]),s._v(" "),e("ol",[e("li",[s._v("项目数（及文件夹数）")]),s._v(" "),e("li",[s._v("用户数（fe_root邮箱前缀）")]),s._v(" "),e("li",[s._v("访问频次（set-cookie次数）")]),s._v(" "),e("li",[s._v("错误比例（每一次set-cookie添加用户标识，在携带标识内访问时服务端出错计算为错误1次，错误次/访问次为错误比例，用于评估服务稳定性）")])]),s._v(" "),e("p",[s._v("在接入公司账号登录以前，服务在统计和规范约束上有一定难度，但我们可以先大致分析。")]),s._v(" "),e("ul",[e("li",[s._v("使用回访：")])]),s._v(" "),e("p",[s._v("主要针对数据无法分析到的内容进行收集，比如使用者遇到哪些问题，是否达到自己的预期等")]),s._v(" "),e("p",[s._v("有了效果分析的数据以后，我们又可以做进一步的迭代优化了。是的，软件工程的提质增效是一个永远解决不完的问题，而对于不同的阶段不同的团队，可能都需要更新适应，这也是互联网的现状。")]),s._v(" "),e("h3",{attrs:{id:"解决方案可能带来的其他影响"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解决方案可能带来的其他影响"}},[s._v("#")]),s._v(" 解决方案可能带来的其他影响")]),s._v(" "),e("ul",[e("li",[s._v("这真的能解决后台的问题吗？")])]),s._v(" "),e("p",[s._v("实际上一开始我就有考虑过一个问题，这是否会导致接口设计质量下降？")]),s._v(" "),e("p",[s._v("面对前后端分离的协作模式，后台更加专注于数据结构和计算逻辑的设计，前端更加专注交互和表现的实现，两者思维模式是不太一样的，有很多资深的后台学起前端来非常吃力也正是这个原因。但这和后台接口设计质量有什么关系？")]),s._v(" "),e("p",[s._v("FTE只是为了满足后台调试效果，一般情况下这没有什么问题，但我们把问题放大来看，如果这个方式大范围应用，后台都基于页面来调试接口，可能会过多的关注交互形式，从而使得一些bug的修复，或者中途设计变更更加偏向当前交互，导致接口抽象不足，增加后期维护成本。我们的项目架构现在并没有BFF，这对后台开发隐藏着很大的挑战，相当于后台既要专注于抽象的数据结构又要关注交互形式。")]),s._v(" "),e("p",[s._v("正确的做法是：后台应该在联调前完成API的逻辑验证，在页面上联调只是辅助验证的方式之一，不应该过于依赖前端FTE。")]),s._v(" "),e("ul",[e("li",[s._v("会给前端带来哪些不好的影响？")])]),s._v(" "),e("p",[s._v("我一直相信人都是具有惰性的，如果后台在FTE环境完成了联调验证，很有可能前端会放松警惕，减少甚至跳过一些验证细节，导致前端的质量降低，这是一种意识上的影响。")]),s._v(" "),e("p",[s._v("对此，前端开发应该正确认知FTE的作用：FTE是解决后台联调阻塞以及质量不佳对前端的工作干扰问题。后台对交互细节并不清楚，这种验证是有很大局限性的，覆盖率远不及前端，所以提测前，前端依然需要完整的走一遍自测流程。当然理论上联调也应该只是前端逻辑的辅助验证，前端在编码时就应该充分考虑并验证自身实现逻辑。")]),s._v(" "),e("p",[s._v("那么我们是否需要解决这个问题？这还得看后续运行阶段的效果观察，等遇到问题再解决也不迟，甚至这种涉及意识的问题，等问题暴露后解决更加有效。")]),s._v(" "),e("h2",{attrs:{id:"总结："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结："}},[s._v("#")]),s._v(" 总结：")]),s._v(" "),e("p",[s._v("前端FTE环境适用于前后端联调阶段，后端开发在页面联调验证使用。能够解决后台联调阻塞时影响前端工作的问题，提高各自闭环工作的效率，减少多人协作带来的负面影响。")]),s._v(" "),e("p",[s._v("在尽量排除外部依赖的干扰下，如何保证开发交付的质量和进度，依然是一个需要持续探索的问题，而FTE解决方案，只是其中的一小环。")])])}),[],!1,null,null,null);a.default=t.exports}}]);